package com.renren.userinc.servicemonitor.system.generated;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class JavaDynamicProxy implements InvocationHandler {
	private Object target;

	public Object bind(Object target) {
		this.target = target;
		return Proxy.newProxyInstance(target.getClass().getClassLoader(),
				target.getClass().getInterfaces(), this);
	}

	@Override
	public Object invoke(Object proxy, Method method, Object[] args)
			throws Throwable {
		String className = method.getDeclaringClass().getName();
		// don't handle the method from java
		if(className.startsWith("java")){
			try{
				method.setAccessible(true);
				Object result = method.invoke(target, args);
				return result;
			}catch(Throwable t){
				throw t;
			}
		}else{
			ServiceMonitor serviceMonitor = ServiceMonitorFactory.getServiceMonitor();
			MonitorInfoBean monitorBasicInfo = new MonitorInfoBean();
			monitorBasicInfo.setAppId("$AppId");
			monitorBasicInfo.setClassName(method.getDeclaringClass().getName());
			monitorBasicInfo.setMethodName(method.getName());
			monitorBasicInfo.setIp(IPService.getLocalIp());
			try{
				// do something before invoke
				serviceMonitor.begin(monitorBasicInfo);
				method.setAccessible(true);
				Object result = method.invoke(target, args);
				
				// do something after invoke
				serviceMonitor.end(monitorBasicInfo);
				return result;
			}catch(Throwable t){
				serviceMonitor.handleException(monitorBasicInfo, t);
				throw t;
			}
		}
	}
}