package com.renren.seo.serviceproxy.system.generated;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class JavaDynamicProxy implements InvocationHandler {
	private Object target;

	public Object bind(Object target) {
		this.target = target;
		return Proxy.newProxyInstance(target.getClass().getClassLoader(),
				target.getClass().getInterfaces(), this);
	}

	@Override
	public Object invoke(Object proxy, Method method, Object[] args)
			throws Throwable {
		ServiceMonitor serviceMonitor = ServiceMonitorFactory.getServiceMonitor();
		MonitorBasicInfo monitorBasicInfo = new MonitorBasicInfo();
		monitorBasicInfo.setAppId("SchoolName");
		monitorBasicInfo.setClassName(method.getDeclaringClass().getName());
		monitorBasicInfo.setMethodName(method.getName());
		monitorBasicInfo.setIp(IPUtil.getLocalIp());
		try{
			// do something before invoke
			serviceMonitor.begin(monitorBasicInfo);
			
			Object result = method.invoke(target, args);
			
			// do something after invoke
			serviceMonitor.end(monitorBasicInfo);
			return result;
		}catch(Throwable t){
			serviceMonitor.handleException(monitorBasicInfo, t);
			throw t;
		}
	}
}