package com.renren.seo.serviceproxy.system.generated;

import java.lang.reflect.Method;

import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;

public class CglibDynamicProxy implements MethodInterceptor {
	private Object target;

	public Object bind(Object target) {
		this.target = target;
		Enhancer enhancer = new Enhancer();
		enhancer.setSuperclass(this.target.getClass());
		enhancer.setCallback(this);
		return enhancer.create();
	}

	@Override
	public Object intercept(Object obj, Method method, Object[] args,
			MethodProxy proxy) throws Throwable {
		ServiceMonitor serviceMonitor = ServiceMonitorFactory.getServiceMonitor();
		MonitorBasicInfo monitorBasicInfo = new MonitorBasicInfo();
		monitorBasicInfo.setAppId("SchoolName");
		monitorBasicInfo.setClassName(method.getDeclaringClass().getName());
		monitorBasicInfo.setMethodName(method.getName());
		monitorBasicInfo.setIp(IPUtil.getLocalIp());
		try{
			// do something before invoke
			serviceMonitor.begin(monitorBasicInfo);
			
			Object result = method.invoke(target, args);
			
			// do something after invoke
			serviceMonitor.end(monitorBasicInfo);
			return result;
		}catch(Throwable t){
			serviceMonitor.handleException(monitorBasicInfo, t);
			throw t;
		}
	}

}